/**
 * Created by bala on 10/7/15.
 */
var njstrace = require('./lib/njstrace/njsTrace');
var agentSetting = require("./lib/agent-setting");
var path = require('path');
var logStream = 'OUTPUT_STREAM'
var util = require('./lib/util');
var cluster = require('cluster'),
    instrumentationFile,customInstrumenattionProfile;
var NDControlConnectionManager = require('./lib/NDConnectionManager')
NJSInstrument.prototype.instrument = function instrument(args)
{
    try
    {
        var temp = process.env.CAV_LOGS ? process.env.CAV_LOGS : logStream;
        if(temp == 'BOTH' || temp == 'FILE' )
            logStream = temp;

        if(args){
            if(!args.logLevel)
                args.logLevel = 'info'
            if(!args.BCILoggingMode)
                args.BCILoggingMode = logStream
            if(args.BCILoggingMode !== logStream && args.BCILoggingMode !== 'BOTH' && args.BCILoggingMode !== 'FILE')
                args.BCILoggingMode = logStream
        }
        else{
            args = {logLevel : 'info' , BCILoggingMode : logStream}
        }

        if(cluster.isMaster) {
            util.initializeLogger(args.logLevel, args.BCILoggingMode)
        }
        else {
            agentSetting.clusterMode =true;
            agentSetting.settingFileMode = 'SHARED'                     //Changing file mode to shared, so need to write Tier Server Instance name send by ndc in ndsettings.conf file.
            util.initializeLogger(args.logLevel, args.BCILoggingMode);
        }
        agentSetting.initAllMap(args);

        if(agentSetting.isAgentConfigDefinedInEnv())
            agentSetting.readAgentConfigInEnv();
        else
            agentSetting.readSettingFile();                 //reading ndsetting file to connect with NS


        /*
         In cluster mode, Instance filed will be generated by agent only in EXCLUSIVE mode in Shared mode, auto scale feature will be
         used to generate instance by NDC
         This check will work only in those case, if auto scaling is not working in instance is sunning in cluster
         mode, then we will provide "EXCLUSIVE" mode in ndsetting.conf .
         */
        if(agentSetting.enableMultiInstMode)                         //This code is commenting because now we have autoscaling feature .
            agentSetting.isCluster();

        //njstrace.inject(null,instrumentationFile);
        //njstrace.inject(null,agentSetting.instrumentationMap);
        //agentSetting.parseInstrProfile(data)
        try {
            instrumentationFile = require('./../../nodeInstr.json');            //Getting Instrumentation profile from server side
        }catch(err){util.logger.warn("No instrumentation profile present ")}

        var instPrfParseobj = require('./lib/njstrace/instrumentationProfleParser');
        if(instrumentationFile)
            instPrfParseobj.parseInstrFile(instrumentationFile)                 //parsing Instrumentation profile
        else{
            try {
                customInstrumenattionProfile = require('./lib/utils/customNodeInstr.json');            //Getting Instrumentation profile from server side
            }catch(err){util.logger.warn("No instrumentation profile present ")}
            instPrfParseobj.parseInstrFile(customInstrumenattionProfile)
        }
	if(agentSetting.agentMode >= 3)	{
		njstrace.inject(null,instPrfParseobj.getInstrMap(),agentSetting.enableWraping);                    //injecting our code into applications code
	}
	if(agentSetting.agentMode >= 2){
		require('./lib/nodetime/index').profile();
	}
		
	agentSetting.generateFPMask();
        process.nextTick(function(){
            try {
	            if(agentSetting.agentMode > 0)
                    NDControlConnectionManager.checkProtocolAndMakeConnection()
            }
            catch(e){
                util.logger.warn(e);
            }
        },1000);

    }
    catch(err){
        console.log(err);
    }
};

function NJSInstrument()
{

}

module.exports = new NJSInstrument();
